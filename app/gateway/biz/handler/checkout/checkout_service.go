// Code generated by hertz generator.

package checkout

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jichenssg/tikmall/app/common/client"
	checkout "github.com/jichenssg/tikmall/app/gateway/biz/model/frontend/checkout"
	"github.com/jichenssg/tikmall/app/gateway/utils"
	checkoutrpc "github.com/jichenssg/tikmall/gen/kitex_gen/checkout"
	paymentrpc "github.com/jichenssg/tikmall/gen/kitex_gen/payment"
)

// Checkout .
// @router /checkout [POST]
func Checkout(ctx context.Context, c *app.RequestContext) {
	hlog.Infof("Checkout service")

	var err error
	var req checkout.CheckoutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	userID := c.GetInt64("user_id")
	hlog.CtxDebugf(ctx, "Checkout service userID: %v, orderID: %v", userID, req.OrderId)

	checkoutclient := client.CheckoutClient
	checkoutresp, err := checkoutclient.Checkout(ctx, &checkoutrpc.CheckoutReq{
		UserId:  userID,
		OrderId: req.OrderId,
		CreditCard: &paymentrpc.CreditCardInfo{
			CreditCardNumber:          req.CardNumber,
			CreditCardExpirationMonth: req.ExpirationMonth,
			CreditCardExpirationYear:  req.ExpirationYear,
			CreditCardCvv:             req.Cvv,
		},
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	resp := &checkout.CheckoutResp{
		Message:       "checkout success",
		TransactionId: checkoutresp.TransactionId,
	}

	c.JSON(consts.StatusOK, resp)
}
