// Code generated by Kitex v0.11.3. DO NOT EDIT.

package authservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	auth "github.com/jichenssg/tikmall/gen/kitex_gen/auth"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	DeliverToken(ctx context.Context, Req *auth.DeliverTokenReq, callOptions ...callopt.Option) (r *auth.DeliveryResp, err error)
	RefreshToken(ctx context.Context, Req *auth.RefreshTokenReq, callOptions ...callopt.Option) (r *auth.RefreshResp, err error)
	VerifyToken(ctx context.Context, Req *auth.VerifyTokenReq, callOptions ...callopt.Option) (r *auth.VerifyResp, err error)
	DeleteToken(ctx context.Context, Req *auth.DeleteTokenReq, callOptions ...callopt.Option) (r *auth.DeleteTokenResp, err error)
	AddRole(ctx context.Context, Req *auth.AddRoleReq, callOptions ...callopt.Option) (r *auth.AddRoleResp, err error)
	RemoveRole(ctx context.Context, Req *auth.RemoveRoleReq, callOptions ...callopt.Option) (r *auth.RemoveRoleResp, err error)
	GetRoles(ctx context.Context, Req *auth.GetRolesReq, callOptions ...callopt.Option) (r *auth.GetRolesResp, err error)
	RemoveAllRoles(ctx context.Context, Req *auth.RemoveAllRolesReq, callOptions ...callopt.Option) (r *auth.RemoveAllRolesResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAuthServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAuthServiceClient struct {
	*kClient
}

func (p *kAuthServiceClient) DeliverToken(ctx context.Context, Req *auth.DeliverTokenReq, callOptions ...callopt.Option) (r *auth.DeliveryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeliverToken(ctx, Req)
}

func (p *kAuthServiceClient) RefreshToken(ctx context.Context, Req *auth.RefreshTokenReq, callOptions ...callopt.Option) (r *auth.RefreshResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RefreshToken(ctx, Req)
}

func (p *kAuthServiceClient) VerifyToken(ctx context.Context, Req *auth.VerifyTokenReq, callOptions ...callopt.Option) (r *auth.VerifyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VerifyToken(ctx, Req)
}

func (p *kAuthServiceClient) DeleteToken(ctx context.Context, Req *auth.DeleteTokenReq, callOptions ...callopt.Option) (r *auth.DeleteTokenResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteToken(ctx, Req)
}

func (p *kAuthServiceClient) AddRole(ctx context.Context, Req *auth.AddRoleReq, callOptions ...callopt.Option) (r *auth.AddRoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddRole(ctx, Req)
}

func (p *kAuthServiceClient) RemoveRole(ctx context.Context, Req *auth.RemoveRoleReq, callOptions ...callopt.Option) (r *auth.RemoveRoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveRole(ctx, Req)
}

func (p *kAuthServiceClient) GetRoles(ctx context.Context, Req *auth.GetRolesReq, callOptions ...callopt.Option) (r *auth.GetRolesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRoles(ctx, Req)
}

func (p *kAuthServiceClient) RemoveAllRoles(ctx context.Context, Req *auth.RemoveAllRolesReq, callOptions ...callopt.Option) (r *auth.RemoveAllRolesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveAllRoles(ctx, Req)
}
