// Code generated by hertz generator.

package cart

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jichenssg/tikmall/app/common/client"
	cart "github.com/jichenssg/tikmall/app/gateway/biz/model/frontend/cart"
	common "github.com/jichenssg/tikmall/app/gateway/biz/model/frontend/common"
	"github.com/jichenssg/tikmall/app/gateway/utils"

	cartrpc "github.com/jichenssg/tikmall/gen/kitex_gen/cart"
	productrpc "github.com/jichenssg/tikmall/gen/kitex_gen/product"
)

// AddItem .
// @router /cart [POST]
func AddItem(ctx context.Context, c *app.RequestContext) {
	hlog.Infof("AddItem service")

	var err error
	var req cart.AddItemReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	userID := c.GetInt64("user_id")

	hlog.Debugf("AddItem service userID: %v, productID: %v, quantity: %v", userID, req.ProductId, req.Quantity)

	cartclient := client.CartClient
	addresp, err := cartclient.AddItem(ctx, &cartrpc.AddItemReq{
		UserId: userID,
		Item: &cartrpc.CartItem{
			ProductId: req.ProductId,
			Quantity:  int32(req.Quantity),
		},
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	resp := &cart.AddItemResp{
		Message: "add item success",
		Id:      addresp.Id,
	}

	c.JSON(consts.StatusOK, resp)
}

// GetCart .
// @router /cart [GET]
func GetCart(ctx context.Context, c *app.RequestContext) {
	hlog.Infof("GetCart service")

	var err error
	var req common.Empty
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	userID := c.GetInt64("user_id")

	hlog.Debugf("GetCart service userID: %v", userID)

	cartclient := client.CartClient
	getresp, err := cartclient.GetCart(ctx, &cartrpc.GetCartReq{
		UserId: userID,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	resp := &cart.GetCartResp{
		Message: "get cart success",
		Cart: &cart.Cart{
			UserId: userID,
			Items: func() []*cart.RespCartItem {
				items := make([]*cart.RespCartItem, 0, len(getresp.Cart.Items))
				for _, item := range getresp.Cart.Items {
					productclient := client.ProductClient
					productresp, err := productclient.GetProduct(ctx, &productrpc.GetProductReq{
						Id: item.ProductId,
					})
					if err != nil {
						c.JSON(utils.ParseRpcError(err))
						return nil
					}

					items = append(items, &cart.RespCartItem{
						Product:  utils.Product2resp(productresp.Product),
						Quantity: item.Quantity,
					})
				}
				return items
			}(),
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// EmptyCart .
// @router /cart/empty [POST]
func EmptyCart(ctx context.Context, c *app.RequestContext) {
	hlog.Infof("EmptyCart service")

	var err error
	var req common.Empty
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	userID := c.GetInt64("user_id")

	hlog.Debugf("EmptyCart service userID: %v", userID)

	cartclient := client.CartClient
	_, err = cartclient.EmptyCart(ctx, &cartrpc.EmptyCartReq{
		UserId: userID,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	resp := &common.Response{
		Message: "empty cart success",
	}

	c.JSON(consts.StatusOK, resp)
}
