// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/klog"
	"github.com/jichenssg/tikmall/app/common/client"
	common "github.com/jichenssg/tikmall/app/gateway/biz/model/frontend/common"
	user "github.com/jichenssg/tikmall/app/gateway/biz/model/frontend/user"
	"github.com/jichenssg/tikmall/app/gateway/utils"

	authrpc "github.com/jichenssg/tikmall/gen/kitex_gen/auth"
	userrpc "github.com/jichenssg/tikmall/gen/kitex_gen/user"
)

// Register .
// @router /auth/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	hlog.Infof("User Register")

	var err error
	var req user.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.CtxErrorf(ctx, "Register error: %v", err)
		c.JSON(consts.StatusBadRequest, &user.RegisterResp{
			Message: err.Error(),
		})

		return
	}

	userclient := client.UserClient
	resp, err := userclient.Register(ctx, &userrpc.RegisterReq{
		Username:        req.Username,
		Password:        req.Password,
		ConfirmPassword: req.ConfirmPassword,
		Email:           req.Email,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &user.RegisterResp{
		Message: "register success",
		UserId:  resp.UserId,
	})
}

// Login .
// @router /auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	hlog.Infof("User Login")

	var err error
	var req user.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.CtxErrorf(ctx, "Login error: %v", err)
		c.JSON(consts.StatusInternalServerError, &user.LoginResp{
			Message: err.Error(),
		})

		return
	}

	userclient := client.UserClient
	loginResp, err := userclient.Login(ctx, &userrpc.LoginReq{
		Email:    req.Email,
		Password: req.Password,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	authclient := client.AuthClient
	deliverTokenResp, err := authclient.DeliverToken(ctx, &authrpc.DeliverTokenReq{
		UserId: loginResp.UserId,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &user.LoginResp{
		Message:      "login success",
		RefreshToken: deliverTokenResp.RefreshToken,
		AccessToken:  deliverTokenResp.AccessToken,
	})
}

// Logout .
// @router /auth/logout [POST]
func Logout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LogoutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	_, err = authclient.DeleteToken(ctx, &authrpc.DeleteTokenReq{
		Token: req.Token,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &common.Response{
		Message: "logout success",
	})
}

// Info .
// @router /auth/info [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.InfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	userclient := client.UserClient
	resp, err := userclient.Info(ctx, &userrpc.InfoReq{
		UserId: c.GetInt64("user_id"),
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &user.InfoResp{
		UserId:   resp.UserId,
		Username: resp.Username,
		Email:    resp.Email,
	})
}

// Delete .
// @router /auth/delete [DELETE]
func Delete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	_, err = authclient.DeleteToken(ctx, &authrpc.DeleteTokenReq{
		Token: req.Token,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	userclient := client.UserClient
	_, err = userclient.Delete(ctx, &userrpc.DeleteReq{
		UserId: c.GetInt64("user_id"),
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &common.Response{
		Message: "delete success",
	})

}

// RefreshToken .
// @router /auth/refresh [POST]
func RefreshToken(ctx context.Context, c *app.RequestContext) {
	hlog.Infof("User RefreshToken")

	var err error
	var req user.RefreshTokenReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	resp, err := authclient.RefreshToken(ctx, &authrpc.RefreshTokenReq{
		RefreshToken: req.RefreshToken,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &user.RefreshTokenResp{
		Message:      "refresh token success",
		RefreshToken: resp.RefreshToken,
		AccessToken:  resp.AccessToken,
	})
}

// AddUserRole .
// @router /auth/role/add [POST]
func AddUserRole(ctx context.Context, c *app.RequestContext) {
	klog.Infof("AddUserRole")

	var err error
	var req user.RoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	_, err = authclient.AddRole(ctx, &authrpc.AddRoleReq{
		UserId: req.UserId,
		Role:   "user",
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &common.Response{
		Message: "add role success",
	})
}

// RemoveUserRole .
// @router /auth/role/remove [POST]
func RemoveUserRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	_, err = authclient.RemoveRole(ctx, &authrpc.RemoveRoleReq{
		UserId: req.UserId,
		Role:   "user",
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &common.Response{
		Message: "remove role success",
	})
}

// AddAdminRole .
// @router /auth/role/add_admin [POST]
func AddAdminRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	_, err = authclient.AddRole(ctx, &authrpc.AddRoleReq{
		UserId: req.UserId,
		Role:   "admin",
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &common.Response{
		Message: "add role success",
	})
}

// RemoveAdminRole .
// @router /auth/role/remove_admin [POST]
func RemoveAdminRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	_, err = authclient.RemoveRole(ctx, &authrpc.RemoveRoleReq{
		UserId: req.UserId,
		Role:   "admin",
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &common.Response{
		Message: "remove role success",
	})
}

// AddBlacklistRole .
// @router /auth/role/add_blacklist [POST]
func AddBlacklistRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RoleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	_, err = authclient.RemoveAllRoles(ctx, &authrpc.RemoveAllRolesReq{
		UserId: req.UserId,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &common.Response{
		Message: "add blacklist success",
	})
}

// GetRoles .
// @router /auth/roles [GET]
func GetRoles(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetRolesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	authclient := client.AuthClient
	resp, err := authclient.GetRoles(ctx, &authrpc.GetRolesReq{
		UserId: req.UserId,
	})

	if err != nil {
		c.JSON(utils.ParseRpcError(err))
		return
	}

	c.JSON(consts.StatusOK, &user.GetRolesResp{
		Roles: resp.Roles,
	})
}
