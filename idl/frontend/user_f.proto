syntax = "proto3";

package frontend.user;

import "frontend/api.proto";
import "frontend/common.proto";

option go_package = "/frontend/user";

message RegisterReq {
  string email = 1 [ (api.body) = "email,required" ];
  string password = 2 [ (api.body) = "password,required" ];
  string confirm_password = 3 [ (api.body) = "confirm_password,required" ];
  string username = 4 [ (api.body) = "username,required" ];
}

message RegisterResp {
  string message = 1;
  int64 user_id = 2;
}

message LoginReq {
  string email = 1 [ (api.body) = "email,required" ];
  string password = 2 [ (api.body) = "password,required" ];
}

message LoginResp {
  string message = 1;
  string access_token = 2;
  string refresh_token = 3;
}

message LogoutReq {
	string token = 1 [ (api.header) = "Authorization,required" ];
}

message InfoReq {
	string token = 1 [ (api.header) = "Authorization,required" ];
}

message InfoResp {
	string message = 1;
	int64 user_id = 2;
	string email = 3;
	string username = 4;
}

message DeleteReq {
	string token = 1 [ (api.header) = "Authorization,required" ];
}

message RefreshTokenReq {
	string refresh_token = 1 [ (api.header) = "Authorization,required" ];
}

message RefreshTokenResp {
	string message = 1;
	string access_token = 2;
	string refresh_token = 3;
}

message RoleReq {
	int64 user_id = 1 [ (api.body) = "user_id,required" ];
}

message GetRolesReq {
	int64 user_id = 1 [ (api.query) = "user_id,required" ];
}

message GetRolesResp {
	string message = 1;
	repeated string roles = 2;
}


service AuthService {
  rpc register(RegisterReq) returns (RegisterResp) {
    option (api.post) = "/auth/register";
  }

  rpc login(LoginReq) returns (LoginReq) {
    option (api.post) = "/auth/login";
  }

  rpc logout(LogoutReq) returns (common.Response) {
    option (api.post) = "/auth/logout";
  }

  rpc info(InfoReq) returns (InfoResp) {
	option (api.get) = "/auth/info";
  }

  rpc delete(DeleteReq) returns (common.Response) {
	option (api.post) = "/auth/delete";
  }

  rpc refreshToken(RefreshTokenReq) returns (RefreshTokenResp) {
	option (api.post) = "/auth/refresh";
  }

  // dynamic role management
  rpc AddUserRole(RoleReq) returns (common.Response) {
	option (api.post) = "/auth/role/add_user";
  }

  rpc RemoveUserRole(RoleReq) returns (common.Response) {
	option (api.post) = "/auth/role/remove_user";
  }

  rpc AddAdminRole(RoleReq) returns (common.Response) {
	option (api.post) = "/auth/role/add_admin";
  }

  rpc RemoveAdminRole(RoleReq) returns (common.Response) {
	option (api.post) = "/auth/role/remove_admin";
  }

  rpc AddBlacklistRole(RoleReq) returns (common.Response) {
	option (api.post) = "/auth/role/add_blacklist";
  }

  rpc GetRoles(GetRolesReq) returns (GetRolesResp) {
	option (api.get) = "/auth/roles";
  }
}